name: Make release

on:
  workflow_dispatch:
    inputs:
      tagname:
        description: 'The tag to make the release with.'
        required: true

jobs:  
  make-windows-release:
    name: Make Windows release
    runs-on: windows-latest
    steps:
      # Install Qt.
      - name: Install Qt
        uses: jurplel/install-qt-action@v2  
      
      # Checkout our code and the latest official googletest release.
      - name: Checkout our code
        uses: actions/checkout@v2
        with:
          path: "CleanGSUI/" 
      - name: Checkout latest release of googletest
        run: git clone https://github.com/google/googletest.git -b release-1.10.0
      
      # Build on Windows.
      # googletest isn't needed here, but it complains, so yeah.
      # Should probably find a nice way to decouple the test subproject.
      - name: Build
        run: |
          mkdir build
          cd build
          call "%programfiles(x86)%\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          qmake ${{ github.workspace }}/CleanGSUI/CleanGSUI.pro -config release GOOGLETEST_DIR+=${{ github.workspace }}/googletest
          nmake
          dir .
        shell: cmd
      
      # We make a new directory at the base, then run windeployqt here.
      # This because for some reason, tar refuses to exclude files properly.
      # Thus, if this is done in build, the .cpp/.obj files will be bundled as well.
      # So, we run windeployqt here, then copy the executable only.
      - name: Run windeployqt and copy executable
        run: |
          mkdir windows_release
          cd windows_release
          windeployqt --release --verbose 2 --no-translations -dir . ${{ github.workspace }}/build/app/release/app.exe
          move ${{ github.workspace }}\build\app\release\app.exe .
          dir .
        shell: cmd
      
      # Create a zip of the release directory here.
      - name: Make release archive
        run: |
          tar -c -f windows_release.zip windows_release
          dir .
        shell: cmd
        
      # Create the release; this is copied from the example code for actions/create-release.
      # tag_name is replaced with the tag name input when the action is invoked.
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tagname }}
          release_name: Release ${{ github.event.inputs.tagname }}
          
      # Upload the zip.
      # Also copied from the example for this action.
      - name: Upload to release
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows_release.zip
          asset_name: windows_release.zip
          asset_content_type: application/zip